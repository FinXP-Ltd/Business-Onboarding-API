name: Base Scan

on:
  push:
    branches: [ uat ]

env:
  BO_DATABASE: finxp_bo
  LOGS_DATABASE: finxp_logs
  DB_USER: root
  DB_PASSWORD: root

jobs:
  preparation-base:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Setup Database
        run: |
          sudo /etc/init.d/mysql start
          mysql -h 127.0.0.1 --user=root --password=root -e "CREATE DATABASE ${{ env.BO_DATABASE }};"
          mysql -h 127.0.0.1 --user=root --password=root -e "CREATE DATABASE ${{ env.LOGS_DATABASE }};"
      - name: Add HTTP basic auth credentials
        run: echo '${{ secrets.COMPOSER_AUTH }}' > $GITHUB_WORKSPACE/auth.json
      - id: composer-cache
        name: Setup cache for composer
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Caching composer
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Setup PHP Server
        uses: shivammathur/setup-php@master
        with:
          coverage: pcov
          php-version: "8.3"
          extension: dom, fileinfo, mbstring
      - name: Composer Update
        run: composer update
      - name: Prepare environment
        run: |
          composer install --no-suggest --prefer-dist --optimize-autoloader
          php -r "file_exists('.env') || copy('.env.example', '.env');"
          php artisan key:generate
      - name: Seed and Dump SQL
        run: |
          mysql -h 127.0.0.1 --user=root --password=root -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';"
          php artisan migrate:fresh --seed
          mysqldump -h 127.0.0.1 --user=root --password=root ${{ env.BO_DATABASE }} > finxp_bo.sql
          mysqldump -h 127.0.0.1 --user=root --password=root ${{ env.LOGS_DATABASE }} > finxp_logs.sql
      - name: Upload Artifacts
        uses: actions/upload-artifact@master
        with:
          name: preparation_artifacts
          path: |
            .env
            finxp_bo.sql
          retention-days: 1
          if-no-files-found: error

  testing-base:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - id: composer-cache
        name: Setup Cache for composer
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Caching composer
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Add HTTP basic auth credentials
        run: echo '${{ secrets.COMPOSER_AUTH }}' > $GITHUB_WORKSPACE/auth.json
      - name: Setup PHP Server
        uses: shivammathur/setup-php@master
        with:
          coverage: pcov
          php-version: "8.3"
          extension: dom, fileinfo, mbstring
      - name: Composer Update
        run: composer update
      - name: Prepare environment
        run: |
          composer install --no-suggest --prefer-dist --optimize-autoloader
          php -r "file_exists('.env') || copy('.env.example', '.env');"
      - name: Import Database
        run: |
          sudo /etc/init.d/mysql start
          mysql -h 127.0.0.1 --user=root --password=root -e "CREATE DATABASE ${{ env.BO_DATABASE }};"
          php artisan migrate:fresh --seed
      - name: Run Test Cases
        run: |
          mysql -h 127.0.0.1 --user=root --password=root -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';"
          php -dpcov.enabled=1 -dpcov.directory=app -dpcov.exclude="~vendor~" ./vendor/bin/phpunit --configuration phpunit.xml
      - name: Upload Logs Artifact when failed
        uses: actions/upload-artifact@master
        if: failure()
        with:
          name: logs-artifact
          path: storage/logs/
          retention-days: 1
      - name: Upload Report Artifacts
        uses: actions/upload-artifact@master
        with:
          name: bo_base_reports
          path: reports/
          retention-days: 1

  compliance-base:
    runs-on: ubuntu-20.04
    needs: [testing-base]
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
    steps:
      - uses: actions/checkout@v2
      - name: Download Report Artifacts
        uses: actions/download-artifact@master
        with:
          name: bo_base_reports
      - name: Setup Node Server
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'
      - name: Get Branch Name
        uses: rlespinasse/github-slug-action@v3.x
      - name: Sonarqube Scan
        run: |
          sudo npm install -g sonarqube-scanner
          sed -i -e "s/sonar.login=/sonar.login=${{ env.SONAR_TOKEN }}/g" sonar-project.properties
          sed -i -e "s|sonar.projectKey=|sonar.projectKey=${{ env.SONAR_PROJECT_KEY }}|g" sonar-project.properties
          sed -i -e "s|sonar.pullrequest.key=|# sonar.pullrequest.key=|g" sonar-project.properties
          sed -i -e "s|sonar.pullrequest.branch=|# sonar.pullrequest.branch=|g" sonar-project.properties
          sed -i -e "s|sonar.pullrequest.base=|# sonar.pullrequest.base=uat|g" sonar-project.properties
          sed -i -e "s|# sonar.branch.name=uat|sonar.branch.name=uat|g" sonar-project.properties
          sonar-scanner
